 
bugs:
 - when server is killed, rooms are left in a active: true and requested: true state and will not load
 - add a time based recovery to room load
 - add indicator of stale rooms to admin

todos:
 - fix path broadcast (just broadcast entire path)
 - save incrementally to DB
 - write incrementally to websocket


fancy debug:
 - pause gevent for actor from admin
 - update state for actor from admin
 - view running code (function / traceback?) for actor from admin - done
 - view message log ("chat" etc) from admin - highlight actor when message sent


idiosyncratic behaviour:
 - possible to lock up server if an actor get stuck in a fast kick() loop
 - after exiting through a door in a script, must exit kickoff() method immediately, as the actor.room reference is None:
    - move_to_room will, coincidentally, call kick() when the actor's loaded


mapeditor:
 - edit room id
 - delete object / delete room
 - delete tag
 - new doors? connect actual rooms
 - add/edit object data (background image / tag fields whatever)
 - Undo function (multi-mapfile-history (js local and on server))

bulk write actor saver
 - listen for exceptions from worker gthreads (actor_loader)

 - defo need a game admin section where an admin can create/manage games

 - simplify script objects
 - add geographies back in

 - might need a tool for creating games in the DB
   - command line (rooms create_game)
   - web admin
 - try find a way to move the django apps as non-required utils of rooms main

 - switching up to websocket from localhost master to ray-dev node didn't give 404

 - change report_load_stats to save directly to mongo
 - change master to work from mongo

 - change map json format:
   - simplify room_id (map1.room1 -> room1)


simplify:
 - move registered node / managed room map to mongo


mapeditor:
 - select room (highlight add object/tag)
 - select object/tag
 - add room
 - add object / tag

Cleanup:
 - single rooms.js file used by all - include as resource + collectable django static file + bower (maybe)
 - demo django app which uses all the djano apps

 - simplify scripts to module path include

Admin:
 - Draw docked actors at slight offset
 - Add current script call underneath actor
 - Add "add actor" call
 - Add "remove actor" call
   - this wont work with player actors

State:
 - state object sends diff for all changes made

 - DictState ListState InventoryState

 - internal & external state

 - expose all actor state to admin

 - complex state objects (tiered, automatic updated for each)
   - to be used for complex actor fields like inventory, chat, quest log etc.


Dbase:
 - container save queue
 - change manage room from remote call to mongo upsert of new room


Master:
 - manage room queue - single gthread for managing rooms - requests for the rooms waits on the gthread for the room to come up


Bugs:
 - cannot load limboed actor if said actor is docked with another
 - _loadstate left as "limbo" on room load

 - admin receiving everyone's updates again

 - steering behaviour at edge of room causes loop lock

 - manage_room may be called twice, creating two rooms on node

 - the queues are leaking messages (messages not be propagated are just left)


Suggestions:
 - Action methods, backed up by kickoff() method if things go pearshaped


Nice to haves:
 - create objects for map creation and export scripts and normalize with api
    (i.e. Room() object is the same room in the app as the scripts)

 - the error reporting in this guy needs tidying
 - need ATs - inter-node movement etc

 - add version tag + version number to setup.py

 - add check for existing scripts (scripts which are assumed to exist: game_script.py player_script.py)


 - settings for map url
 - settings for master domain
 - settings for node domain(s) (possibly startup option on node)

 - add master_domain to master and node

 - node polls dbase for actors entering rooms (mongo query-update) - done

 - check RPCWaitsExceptions for:
   - player moves room to offline node
   - actor (npc) moves room to offline node

   - master.actor_entered - if room offline, send wait
   - node._send_actor_entered_message - if player and got wait, redirect to master

 - if a room is being torn down:
   - set it to offline in master
   - any node (player) requests for that room are bounced to master
   - any npc requests for that room are ignored
     - npc should restore when/if room comes back up again
   - any player connections for that room are waited

 - get a "connecting/loading" bit going on the js gui

 - automatic websocket keep alive

 - saves - save data to mongo on events etc

 - remove room when bored

 - master server
   - implement room creation / remove as queue on single gthread
   - queue player connects behind room queue
     - waiting list

 - instanced rooms

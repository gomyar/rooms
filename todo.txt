
 - node saves everything on exit

 - check RPCWaitsExceptions for:
   - player moves room to offline node
   - actor (npc) moves room to offline node

 - if a room is being torn down:
   - set it to offline in master
   - any player requests for that room are bounced to master
   - any npc requests for that room are ignored
     - npc should restore when/if room comes back up again

 - node pushes load info to master every n seconds

 - add admin client

 - deactivate room if no players enter for period of time

 - container save queue

 - complex state objects (tiered, automatic updated for each)
   - to be used for complex actor fields like inventory, chat, quest log etc.

 - automatic websocket keep alive

 - proxy
   - on player connect, query master for node to connect to, bounce to node
   - on player join, same

 - node
   - player objects are conected to 1 room at a time
     - player may interact with actors in that room
     - PlayerActor is only actor the player directly controls / follows through doors

   - if no nodes registered, players wait on queue for a room to be created

 - saves - save data to mongo on events etc

 - basic demo
   - open to all
   - players join a game, etc, redirect to a node, 

 - remove room when bored

 - master server
   - implement room creation / remove as queue on single gthread
   - queue player connects behind room queue
     - waiting list

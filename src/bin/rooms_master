#!/usr/bin/env python

import os
import sys

from gevent import monkey
monkey.patch_socket()
import gevent.backdoor

from optparse import OptionParser
from ConfigParser import ConfigParser

from rooms.master import Master
from rooms.geography.pointmap_geography import PointmapGeography
from rooms.geography.linearopen_geography import LinearOpenGeography
from rooms.mongo.mongo_container import MongoContainer
from rooms.container import Container
from rooms.script_wrapper import Script

import logging
import logging.config
log = logging.getLogger("rooms.master")


geogs = {
    'pointmap': PointmapGeography,
    'linearopen': LinearOpenGeography,
}


if __name__ == "__main__":
    master = None
    try:
        log.info("Starting server")
        parser = OptionParser()

        parser.add_option("-a", "--address", dest="address",
            help="Address of master", default="localhost:9000")

        parser.add_option("-d", "--dbaddr", dest="dbaddr",
            default="localhost:27017", help="Address of mongo server")

        parser.add_option("-g", "--game", dest="gameconf",
                help="Path to game config file", default="./game.conf")

        parser.add_option("-b", "--backdoor", dest="backdoor",
                action="store_true", help="Open backdoor socket")

        (options, args) = parser.parse_args()

        if not os.path.exists(options.gameconf):
            print "No game file exists at '%s'" % (options.gameconf,)
            sys.exit(1)

        if os.path.exists("logging.conf"):
            logging.config.fileConfig("logging.conf")
        else:
            logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        host, port = options.address.split(":")

        config = ConfigParser()
        config.read(options.gameconf)

        sys.path.append(config.get("scripts", "root"))

        mongo_container = MongoContainer(config.get("game", "dbhost"),
            int(config.get("game", "dbport")), config.get("game", "dbname"))
        mongo_container.init_mongo()
        master = Master(host, int(port),
            Container(mongo_container, geogs[config.get("game", "geography")](),
                None, dict(config.items("game"))),
                Script(config.get("scripts", "game_script")),
                dict(config.items("game")),
        )

        if options.backdoor:
            server = gevent.backdoor.BackdoorServer(('127.0.0.1', 3000),
                locals=dict(master=master))
            server.start()

        log.info("Starting Rooms")
        master.start()
        master.wsgi_server.wsgi_server.serve_forever()
    except:
        log.exception("Exception starting server")
    finally:
        log.info("Server stopped")

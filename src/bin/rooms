#!/usr/bin/env python

import os
import sys

from gevent import monkey
monkey.patch_socket()
import gevent.backdoor

from optparse import OptionParser

from rooms.node import Node

import logging
import logging.config
log = logging.getLogger("rooms.node")


if __name__ == "__main__":
    node = None
    try:
        log.info("Starting server")
        parser = OptionParser()

        parser.add_option("-c", "--controller", dest="controller_address",
            help="Address of controller node", default="localhost:8082")

        parser.add_option("-i", "--controller-api", dest="controller_api",
            help="Address of controller xmlrpc api (client and controller)",
            default="localhost:8081")

        parser.add_option("-a", "--address", dest="address",
            default="localhost:8080", help="Public address to serve node on")

        parser.add_option("-d", "--dbaddr", dest="dbaddr",
            default="localhost:27017", help="Address of mongo server")

        parser.add_option("-g", "--game", dest="game",
                help="Path to game dir", default=".")

        parser.add_option("-b", "--backdoor", dest="backdoor",
                action="store_true", help="Open backdoor socket")

        parser.add_option("-j", "--join", dest="join",
            action="store_true", help="Join a cluster")

        (options, args) = parser.parse_args()

        if not os.path.exists(options.game):
            print "No game file exists at '%s'" % (options.game,)
            sys.exit(1)

        if os.path.exists("logging.conf"):
            logging.config.fileConfig("logging.conf")
        else:
            logging.basicConfig(
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        host, port = options.address.split(":")
        dbhost, dbport = options.dbaddr.split(":")

        node = Node(options.game, host, int(port))
        node.load_game(dbhost, int(dbport))
        if options.join:
            node.join_cluster(options)
        else:
            node.init_controller(options)

        if options.backdoor:
            server = gevent.backdoor.BackdoorServer(('127.0.0.1', 3000),
                locals=dict(node=node))
            server.start()

        log.info("Starting Rooms")
        node.start()
    except:
        log.exception("Exception starting server")
    finally:
        log.info("Server stopped")
        if node:
            node.shutdown()

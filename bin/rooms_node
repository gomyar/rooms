#!/usr/bin/env python

import os
import sys

from gevent import monkey
monkey.patch_socket()

from optparse import OptionParser
from ConfigParser import ConfigParser

from rooms.node import Node
from rooms.node import GameController
from rooms.node import NodeController
from rooms.container import Container
from rooms.dbase.mongo_dbase import MongoDBase
from rooms.rpc import WSGIRPCServer
from rooms.geography.basic_geography import BasicGeography
from rooms.room_factory import RoomFactory
from rooms.room_factory import FileMapSource

import logging
import logging.config
log = logging.getLogger("rooms.node")


if __name__ == "__main__":
    master = None
    node = None
    try:
        log.info("Starting Node")
        parser = OptionParser()

        parser.add_option("-a", "--address", dest="address",
            help="Address of node", default="localhost:8000")

        parser.add_option("-m", "--master", dest="master",
            help="Address of master", default="localhost:9999")

        parser.add_option("-g", "--game", dest="game",
            help="Path to game dir", default=".")

        (options, args) = parser.parse_args()

#        if not os.path.exists(options.gameconf):
#            print "No game file exists at '%s'" % (options.gameconf,)
#            sys.exit(1)

#        config = ConfigParser()
#        config.read(options.gameconf)

#        sys.path.append(config.get("scripts", "root"))

        if os.path.exists("logging.conf"):
            logging.config.fileConfig("logging.conf")
        else:
            logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        if not os.path.exists(options.game):
            print "Game directory does not exist'%s'" % (options.game,)
            sys.exit(1)
        else:
            sys.path.append(os.path.join(options.game, "scripts"))

        host, port = options.address.split(":")
        master_host, master_port = options.master.split(":")
        node = Node(host, port, master_host, master_port)
        node.load_player_script("player_script")
#        node.load_game_script("game_script")
        dbase = MongoDBase()
        dbase.init_mongo()
        geography = BasicGeography()
        room_factory = RoomFactory(FileMapSource(os.path.join(options.game,
            "maps")), node)
        container = Container(dbase, geography, node, room_factory)
        node.container = container
        server = WSGIRPCServer(host, port)
        server.add_controller("node", NodeController(node))
        server.add_controller("game", GameController(node))
        server.add_file_root("assets", os.path.join(options.game, "assets"))
        server.add_file_root("maps", os.path.join(options.game, "maps"))
        log.info("Starting Rooms Node")
        server.start()
        node.connect_to_master()
        server.serve_forever()
    except KeyboardInterrupt, ke:
        log.debug("Node stopped")
    except:
        log.exception("Exception starting Node")
    finally:
        node.deregister()
        log.info("Node deregistered")

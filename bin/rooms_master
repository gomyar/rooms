#!/usr/bin/env python

import os
import sys

import gevent.backdoor
from gevent import monkey
monkey.patch_socket()

from optparse import OptionParser
from ConfigParser import SafeConfigParser

import rooms
from rooms.master import Master
from rooms.master import MasterController
from rooms.master import PlayerController
from rooms.container import Container
from rooms.dbase.mongo_dbase import MongoDBase
from rooms.rpc import WSGIRPCServer
from rooms.item_registry import ItemRegistry

import logging
import logging.config
log = logging.getLogger("rooms.master")


def load_config(config_path):
    defaults = {
        "internal_host": "localhost",
        "internal_port": "9999",
        "external_host": "localhost",
        "external_port": "9999",
        "dbname": "rooms_db",
        "dbhost": "localhost",
        "dbport": "27017",
    }

    parser = SafeConfigParser(defaults)
    parser.read(config_path)
    return parser


if __name__ == "__main__":
    master = None
    try:
        log.info("Starting server")
        parser = OptionParser()

        parser.add_option("-g", "--game", dest="game",
            help="Path to game config file", default=".")

        parser.add_option("-b", "--backdoor", dest="backdoor",
            default=None, help="Open backdoor socket")

        (options, args) = parser.parse_args()

        if os.path.exists(os.path.join(options.game, "logging.conf")):
            logging.config.fileConfig(os.path.join(options.game,
                "logging.conf"))
        else:
            logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        config = load_config(os.path.join(options.game, "game.conf"))

        node_host = config.get("node", "internal_host")
        node_port = config.get("node", "internal_port")
        external_node_host = config.get("node", "external_host")
        external_node_port = config.get("node", "external_port")
        master_host = config.get("master", "internal_host")
        master_port = config.get("master", "internal_port")
        external_master_host = config.get("master", "external_host")
        external_master_port = config.get("master", "external_port")

        dbase = MongoDBase(host=config.get("db", "dbhost"),
            port=config.getint("db", "dbport"),
            dbname=config.get("db", "dbname"))
        dbase.init_mongo()

        item_registry = ItemRegistry()
        item_registry.load_from_directory(options.game)

        master = Master(Container(dbase, None, None, None,
            item_registry=item_registry))
        master.load_scripts(os.path.join(options.game, "scripts"))

        server = WSGIRPCServer(master_host, master_port,
            access_control_header="*")
        server.add_controller("master_control", MasterController(master))
        server.add_controller("master_game", PlayerController(master))

        log.info("Starting Rooms Master")
        master.start()
        server.start()

        if options.backdoor:
            log.debug("Starting backdoor server on port %s" % (
                options.backdoor,))
            backdoor = gevent.backdoor.BackdoorServer(('127.0.0.1',
                int(options.backdoor)), locals=dict(master=master))
            backdoor.start()
        server.serve_forever()
    except KeyboardInterrupt, ke:
        log.debug("Master stopped")
        master.shutdown()
    except:
        log.exception("Exception starting server")
        sys.exit(1)

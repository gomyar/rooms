#!/usr/bin/env python

import os
import sys

import gevent.backdoor
from gevent import monkey
monkey.patch_socket()

from optparse import OptionParser
from ConfigParser import ConfigParser

from rooms.master import Master
from rooms.master import MasterController
from rooms.master import PlayerController
from rooms.container import Container
from rooms.dbase.mongo_dbase import MongoDBase
from rooms.rpc import WSGIRPCServer

import logging
import logging.config
log = logging.getLogger("rooms.master")


if __name__ == "__main__":
    master = None
    try:
        log.info("Starting server")
        parser = OptionParser()

        parser.add_option("-a", "--address", dest="address",
            help="Address of master", default="localhost:9999")

        parser.add_option("-g", "--game", dest="game",
            help="Path to game config file", default=".")

        parser.add_option("-b", "--backdoor", dest="backdoor",
            action="store_true", default=True, help="Open backdoor socket")

        (options, args) = parser.parse_args()

#        if not os.path.exists(options.gameconf):
#            print "No game file exists at '%s'" % (options.gameconf,)
#            sys.exit(1)

#        config = ConfigParser()
#        config.read(options.gameconf)

#        sys.path.append(config.get("scripts", "root"))

        if os.path.exists("logging.conf"):
            logging.config.fileConfig("logging.conf")
        else:
            logging.basicConfig(level=logging.DEBUG,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        host, port = options.address.split(":")
        dbase = MongoDBase()
        dbase.init_mongo()
        master = Master(Container(dbase, None, None, None))
        server = WSGIRPCServer(host, port)
        server.add_controller("master", MasterController(master))
        server.add_controller("player", PlayerController(master))
        # dev server serves game files:
        server.add_file_root("assets", os.path.join(options.game, "assets"))
        server.add_file_root("maps", os.path.join(options.game, "maps"))
        log.info("Starting Rooms Master")
        master.start()
        server.start()

        if options.backdoor:
            log.debug("Starting backdoor server on port 3000")
            backdoor = gevent.backdoor.BackdoorServer(('127.0.0.1', 3000),
                locals=dict(master=master))
            backdoor.start()
        server.serve_forever()
    except KeyboardInterrupt, ke:
        log.debug("Master stopped")
        master.shutdown()
    except:
        log.exception("Exception starting server")
